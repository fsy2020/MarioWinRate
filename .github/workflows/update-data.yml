name: Deploy to Vercel and Update Player Stats

on:
  push:
    branches: [ master, feature/everyday-display ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
  schedule:
    # Run daily at 4 AM Beijing time (8 PM UTC the previous day)
    - cron: '0 20 * * *'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

  update-player-stats:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Download database from S3
      run: |
        aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/mario_filtered.db ./mario_filtered.db
    
    # - name: Run database migration (if needed)
    #   run: |
    #     python migrate_database.py mario_filtered.db
    #   continue-on-error: true
    
    - name: Update player stats
      run: |
        python update_player_stats.py
      # env:
      #   TZ: Asia/Shanghai
    
    - name: Upload updated database to S3
      run: |
        aws s3 cp ./mario_filtered.db s3://${{ secrets.S3_BUCKET_NAME }}/mario_filtered.db
    
    - name: Upload logs to S3
      run: |
        aws s3 cp ./update_player_stats.log s3://${{ secrets.S3_BUCKET_NAME }}/logs/update_player_stats_$(date +%Y%m%d_%H%M%S).log
        if [ -f migration.log ]; then
          aws s3 cp ./migration.log s3://${{ secrets.S3_BUCKET_NAME }}/logs/migration_$(date +%Y%m%d_%H%M%S).log
        fi
      continue-on-error: true
    
    - name: Send notification on failure
      if: failure()
      run: |
        echo "Player stats update failed at $(date)"
        # Add notification logic here (email, Slack, etc.)

